#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform sampler2D first_texture;
uniform sampler2D second_texture;
uniform vec3 viewPos;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
}; 

struct SpotLight {
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;
  
    float constant;
    float linear;
    float quadratic;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;       
};

uniform SpotLight spotLight;
#define MAX_POINT_LIGHTS 10  
uniform Light lights[MAX_POINT_LIGHTS];
uniform int numLights;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;
uniform int lightOn;

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 aPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - aPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // attenuation
    float distance = length(light.position - aPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // spotlight intensity
    float theta = dot(lightDir, normalize(-light.direction)); 
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    // combine results
    vec3 ambient = light.ambient * texture(first_texture, aTexCoord).rgb;
    vec3 diffuse = light.diffuse * diff  * texture(first_texture, aTexCoord).rgb;
    vec3 specular = light.specular * spec * vec3(texture(second_texture, aTexCoord));
    ambient *= attenuation * intensity;
    diffuse *= attenuation * intensity;
    specular *= attenuation * intensity;
    vec3 result = ambient + diffuse + specular;
    return result;
}

vec3 CalcPointLight(Light light) {
  // ambient
  vec3 ambient = light.ambient * texture(first_texture, aTexCoord).rgb;

  vec3 result = ambient;
  return result;
}

void main() {
  vec3 norm = normalize(aNormal);
  vec3 viewDir = normalize(viewPos - aPos);

  vec3 result = vec3(0.0);

if(lightOn == 1){
  for(int i = 0; i < numLights; i++)
    result += CalcPointLight(lights[i]); 
  result += CalcSpotLight(spotLight, norm, aPos, viewDir);
  fragColor = vec4(result, 1.0);
}
else if(lightOn == 0){
    vec3 darkTexture = texture(second_texture, aTexCoord).rgb;
    result = darkTexture * CalcSpotLight(spotLight, norm, aPos, viewDir);
    fragColor = vec4(result, 1.0);
}

}